com.android.vending.billing.IMarketBillingService -> com.android.vending.billing.IMarketBillingService:
    android.os.Bundle sendBillingRequest(android.os.Bundle) -> a
com.android.vending.billing.IMarketBillingService$Stub -> com.android.vending.billing.IMarketBillingService$Stub:
    com.android.vending.billing.IMarketBillingService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.vending.billing.IMarketBillingService$Stub$Proxy -> com.android.vending.billing.IMarketBillingService$Stub$Proxy:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    android.os.Bundle sendBillingRequest(android.os.Bundle) -> a
com.dexnamic.alwayscharged.AdvancedPreferences -> com.dexnamic.alwayscharged.AdvancedPreferences:
    android.preference.ListPreference mListPreferenceSnooze -> a
    android.preference.ListPreference mListPreferenceDuration -> b
    android.preference.ListPreference mListPreferenceMotion -> c
    android.preference.ListPreference mListPreferenceBattery -> d
    java.lang.Boolean mHasPurchased -> e
    boolean mSnoozeWasChanged -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    void setMotionToleranceSummary(java.lang.String) -> a
    void setSkipBatterySummary(java.lang.String) -> b
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
com.dexnamic.alwayscharged.Alarm -> com.dexnamic.alwayscharged.a:
    java.lang.Integer ID -> a
    java.lang.Boolean enabled -> b
    java.lang.String label -> c
    java.lang.Integer hour -> d
    java.lang.Integer minute -> e
    java.lang.Integer repeats -> f
    java.lang.String ringtone -> g
    java.lang.Boolean vibrate -> h
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String getLabel() -> a
    void setLabel(java.lang.String) -> a
    java.lang.Integer getHour() -> b
    void setHour(java.lang.Integer) -> a
    java.lang.Integer getMinute() -> c
    void setMinute(java.lang.Integer) -> b
    java.lang.Integer getRepeats() -> d
    java.lang.Boolean getRepeats(java.lang.Integer) -> c
    void setRepeats(java.lang.Integer) -> d
    java.lang.String getRingtone() -> e
    void setRingtone(java.lang.String) -> b
    java.lang.Boolean getVibrate() -> f
    void setVibrate(java.lang.Boolean) -> a
    java.lang.Integer getID() -> g
    void setID(java.lang.Integer) -> e
    java.lang.Boolean getEnabled() -> h
    void setEnabled(boolean) -> a
    java.lang.CharSequence getTime(android.content.Context) -> a
    java.lang.String repeatToString(android.content.Context,int) -> a
    java.lang.String formatTime(android.content.Context,int,int) -> a
    java.lang.String getRingerName(android.content.Context) -> b
    java.lang.Object clone() -> clone
com.dexnamic.alwayscharged.AlarmActivity -> com.dexnamic.alwayscharged.AlarmActivity:
    android.app.KeyguardManager$KeyguardLock mKeyguardLock -> a
    android.media.MediaPlayer mMediaPlayer -> b
    android.os.Vibrator mVibrator -> c
    android.content.SharedPreferences mSettings -> d
    com.dexnamic.alwayscharged.Alarm mAlarm -> e
    long[] vibratePattern -> f
    android.content.BroadcastReceiver mBroadcastReceiver -> g
    android.os.Handler mHandler -> h
    android.content.DialogInterface$OnKeyListener mOnKeyListener -> i
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onPause() -> onPause
    void onStop() -> onStop
    void stopRingtone() -> a
    boolean repeatAlarm() -> b
    void access$0(com.dexnamic.alwayscharged.AlarmActivity) -> a
    com.dexnamic.alwayscharged.Alarm access$1(com.dexnamic.alwayscharged.AlarmActivity) -> b
    android.os.Handler access$2(com.dexnamic.alwayscharged.AlarmActivity) -> c
    android.content.SharedPreferences access$3(com.dexnamic.alwayscharged.AlarmActivity) -> d
com.dexnamic.alwayscharged.AlarmActivity$1 -> com.dexnamic.alwayscharged.b:
    com.dexnamic.alwayscharged.AlarmActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.dexnamic.alwayscharged.AlarmActivity$2 -> com.dexnamic.alwayscharged.c:
    com.dexnamic.alwayscharged.AlarmActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.dexnamic.alwayscharged.AlarmActivity$3 -> com.dexnamic.alwayscharged.d:
    com.dexnamic.alwayscharged.AlarmActivity this$0 -> a
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
com.dexnamic.alwayscharged.AlarmActivity$4 -> com.dexnamic.alwayscharged.e:
    com.dexnamic.alwayscharged.AlarmActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.dexnamic.alwayscharged.AlarmReceiver -> com.dexnamic.alwayscharged.AlarmReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void startAlarmService(android.content.Context,java.lang.String,com.dexnamic.alwayscharged.Alarm) -> a
com.dexnamic.alwayscharged.AlarmService -> com.dexnamic.alwayscharged.AlarmService:
    float mMotionToleranceDeg -> a
    android.os.PowerManager mPowerManager -> b
    android.hardware.SensorManager mSensorManager -> c
    android.content.SharedPreferences mSharedPreferences -> d
    boolean wasSnooze -> e
    com.dexnamic.alwayscharged.Alarm mAlarm -> f
    int mBatteryPct -> g
    android.hardware.Sensor mAccelerometer -> h
    android.hardware.Sensor mMagneticField -> i
    boolean mAccelRegistered -> j
    boolean mMagneticRegistered -> k
    boolean mAccelEventReceived -> l
    boolean mMagneticEventReceived -> m
    float[] mAccelValues -> n
    float[] mMagneticValues -> o
    boolean mStabilze -> p
    android.os.Handler mHandler -> q
    void onCreate() -> onCreate
    void onStart(android.content.Intent,int) -> onStart
    void onDestroy() -> onDestroy
    boolean screenOn() -> a
    boolean telephoneInUse() -> b
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void doAlarm() -> c
    void doSnooze(int) -> a
    void checkDeviceOrientation(float[]) -> a
    void saveDeviceOrientation(float[]) -> b
    void stopReadingSensors() -> d
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean access$0(com.dexnamic.alwayscharged.AlarmService) -> a
    void access$1(com.dexnamic.alwayscharged.AlarmService) -> b
    void access$2(com.dexnamic.alwayscharged.AlarmService,int) -> a
    void access$3(com.dexnamic.alwayscharged.AlarmService,boolean) -> a
com.dexnamic.alwayscharged.AlarmService$1 -> com.dexnamic.alwayscharged.f:
    com.dexnamic.alwayscharged.AlarmService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.dexnamic.alwayscharged.AlwaysCharged -> com.dexnamic.alwayscharged.AlwaysCharged:
    boolean isDebuggable -> a
    java.lang.Long RAND_PURCHASED -> b
    java.lang.Long RAND_REFUNDED -> c
    void onCreate() -> onCreate
com.dexnamic.alwayscharged.DatabaseHelper -> com.dexnamic.alwayscharged.g:
    android.content.Context context -> a
    java.lang.String CREATE_TABLE_ALARMS -> b
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void removeAllAlarms() -> a
    void addAlarm(com.dexnamic.alwayscharged.Alarm) -> a
    int updateAlarm(com.dexnamic.alwayscharged.Alarm) -> b
    android.content.ContentValues putValues(com.dexnamic.alwayscharged.Alarm) -> d
    com.dexnamic.alwayscharged.Alarm getAlarm(int) -> a
    void deleteAlarm(int) -> b
    void deleteAlarm(com.dexnamic.alwayscharged.Alarm) -> c
    android.database.Cursor getAllAlarms() -> b
    android.database.Cursor getAllActiveAlarms() -> c
com.dexnamic.alwayscharged.EditAlarmPreferenceActivity -> com.dexnamic.alwayscharged.EditAlarmPreferenceActivity:
    int mId -> a
    com.dexnamic.alwayscharged.Alarm mAlarm -> b
    com.dexnamic.alwayscharged.DatabaseHelper database -> c
    android.preference.CheckBoxPreference mEnabledCheckBox -> d
    android.preference.Preference mTimePreference -> e
    com.dexnamic.android.preference.ListPreferenceMultiSelect mRepeatPreference -> f
    android.preference.CheckBoxPreference mVibrateCheckBox -> g
    android.widget.Button cancelButton -> h
    android.widget.Button deleteButton -> i
    android.widget.Button okButton -> j
    android.preference.RingtonePreference mRingtonePreference -> k
    android.preference.EditTextPreference mLabelPreference -> l
    android.os.Vibrator mVibrator -> m
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    void saveAlarm() -> a
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onBackPressed() -> onBackPressed
    void onTimeSet(android.widget.TimePicker,int,int) -> onTimeSet
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void enableAlarm() -> b
com.dexnamic.alwayscharged.ListAlarmsActivity -> com.dexnamic.alwayscharged.ListAlarmsActivity:
    com.dexnamic.alwayscharged.DatabaseHelper dbHelper -> a
    android.widget.Button addButton -> b
    android.database.Cursor cursor -> c
    com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor mAdapter -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void alarmChecked(int,boolean) -> a
    void alarmSelected(int) -> a
    void onClick(android.view.View) -> onClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor -> com.dexnamic.alwayscharged.h:
    android.content.Context mContext -> a
    com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor$OnListClickListener onListClickListener -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor$OnListClickListener access$0(com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor) -> a
com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor$OnItemClickListener -> com.dexnamic.alwayscharged.i:
    int id -> a
    com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor this$0 -> b
    void onClick(android.view.View) -> onClick
com.dexnamic.alwayscharged.ListAlarmsCursorAdaptor$OnListClickListener -> com.dexnamic.alwayscharged.j:
    void alarmChecked(int,boolean) -> a
    void alarmSelected(int) -> a
com.dexnamic.alwayscharged.MainPreferenceActivity -> com.dexnamic.alwayscharged.MainPreferenceActivity:
    android.preference.Preference mPreferenceAbout -> b
    android.preference.Preference mPreferenceAdvanced -> c
    android.preference.Preference mPreferenceUpgrade -> d
    android.preference.Preference mPreferenceSetAlarm -> e
    android.content.SharedPreferences mSettings -> f
    android.content.SharedPreferences$Editor mEditor -> a
    boolean mFirstInstance -> g
    android.os.Handler mHandler -> h
    java.lang.Boolean mHasPurchased -> i
    com.dexnamic.alwayscharged.MainPreferenceActivity$UpgradePurchaseObserver mUpgradePurchaseObserver -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    android.app.AlertDialog$Builder aboutDialogBuilder() -> a
    void upgradeToPro() -> b
    void access$0(com.dexnamic.alwayscharged.MainPreferenceActivity) -> a
com.dexnamic.alwayscharged.MainPreferenceActivity$1 -> com.dexnamic.alwayscharged.k:
    com.dexnamic.alwayscharged.MainPreferenceActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.dexnamic.alwayscharged.MainPreferenceActivity$2 -> com.dexnamic.alwayscharged.l:
    void onClick(android.content.DialogInterface,int) -> onClick
com.dexnamic.alwayscharged.MainPreferenceActivity$3 -> com.dexnamic.alwayscharged.m:
    void onClick(android.content.DialogInterface,int) -> onClick
com.dexnamic.alwayscharged.MainPreferenceActivity$UpgradePurchaseObserver -> com.dexnamic.alwayscharged.n:
    com.dexnamic.alwayscharged.MainPreferenceActivity this$0 -> a
    void onBillingSupported(boolean,java.lang.String) -> a
    void onPurchaseStateChange$25f6e421(com.dexnamic.alwayscharged.billing.Consts$PurchaseState,java.lang.String) -> a
    void onRequestPurchaseResponse(com.dexnamic.alwayscharged.billing.BillingService$RequestPurchase,com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    void onRestoreTransactionsResponse$4bfaf7a0(com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
com.dexnamic.alwayscharged.MyPrefsBackupAgent -> com.dexnamic.alwayscharged.MyPrefsBackupAgent:
    void onCreate() -> onCreate
com.dexnamic.alwayscharged.PowerReceiver -> com.dexnamic.alwayscharged.PowerReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.dexnamic.alwayscharged.PowerSnoozeService -> com.dexnamic.alwayscharged.PowerSnoozeService:
    void onStart(android.content.Intent,int) -> onStart
    android.os.IBinder onBind(android.content.Intent) -> onBind
com.dexnamic.alwayscharged.R -> com.dexnamic.alwayscharged.o:
    android.os.PowerManager$WakeLock mWakeLock -> a
    int setDailyAlarm(android.content.Context,com.dexnamic.alwayscharged.Alarm,boolean) -> a
    void cancelSnooze(android.content.Context) -> a
    void cancelNotification(android.content.Context) -> b
    void snoozeAlarm(android.content.Context,int,int,com.dexnamic.alwayscharged.Alarm) -> a
    android.app.PendingIntent getPendingIntentUpdateCurrent(android.content.Context,com.dexnamic.alwayscharged.Alarm,int) -> a
    android.app.PendingIntent getPendingIntent_Snooze(android.content.Context,com.dexnamic.alwayscharged.Alarm) -> a
    void disablePowerSnooze(android.content.Context) -> c
    void releaseWakeLock() -> a
    void resetRepeatCount(android.content.Context,android.content.SharedPreferences) -> a
    void cancelAlarm(android.content.Context,com.dexnamic.alwayscharged.Alarm) -> b
    void resetAllEnabledAlarms(android.content.Context) -> d
com.dexnamic.alwayscharged.R$styleable -> com.dexnamic.alwayscharged.p:
    int[] ListPreferenceMultiSelect -> a
com.dexnamic.alwayscharged.ResetAlarmsReceiver -> com.dexnamic.alwayscharged.ResetAlarmsReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.dexnamic.alwayscharged.billing.BillingReceiver -> com.dexnamic.alwayscharged.billing.BillingReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.dexnamic.alwayscharged.billing.BillingService -> com.dexnamic.alwayscharged.billing.BillingService:
    com.android.vending.billing.IMarketBillingService mService -> a
    java.util.LinkedList mPendingRequests -> b
    java.util.HashMap mSentRequests -> c
    void setContext(android.content.Context) -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    boolean bindToMarketBillingService() -> g
    boolean checkBillingSupported() -> a
    boolean requestPurchase(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean restoreTransactions() -> b
    boolean confirmNotifications(int,java.lang.String[]) -> a
    void purchaseStateChanged(int,java.lang.String,java.lang.String) -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void unbind() -> c
    boolean access$0(com.dexnamic.alwayscharged.billing.BillingService) -> a
    java.util.LinkedList access$1() -> d
    com.android.vending.billing.IMarketBillingService access$2() -> e
    java.util.HashMap access$3() -> f
    void access$4(com.android.vending.billing.IMarketBillingService) -> a
com.dexnamic.alwayscharged.billing.BillingService$BillingRequest -> com.dexnamic.alwayscharged.billing.a:
    int mStartId -> a
    long mRequestId -> b
    com.dexnamic.alwayscharged.billing.BillingService this$0 -> c
    int getStartId() -> a
    boolean runRequest() -> b
    boolean runIfConnected() -> c
    void onRemoteException(android.os.RemoteException) -> a
    long run() -> d
    void responseCodeReceived(com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    android.os.Bundle makeRequestBundle(java.lang.String) -> a
    void logResponseCode(java.lang.String,android.os.Bundle) -> a
com.dexnamic.alwayscharged.billing.BillingService$CheckBillingSupported -> com.dexnamic.alwayscharged.billing.b:
    java.lang.String mProductType -> a
    long run() -> d
com.dexnamic.alwayscharged.billing.BillingService$ConfirmNotifications -> com.dexnamic.alwayscharged.billing.c:
    java.lang.String[] mNotifyIds -> a
    long run() -> d
com.dexnamic.alwayscharged.billing.BillingService$GetPurchaseInformation -> com.dexnamic.alwayscharged.billing.d:
    long mNonce -> a
    java.lang.String[] mNotifyIds -> b
    long run() -> d
    void onRemoteException(android.os.RemoteException) -> a
com.dexnamic.alwayscharged.billing.BillingService$RequestPurchase -> com.dexnamic.alwayscharged.billing.e:
    java.lang.String mProductId -> a
    java.lang.String mDeveloperPayload -> b
    java.lang.String mProductType -> c
    com.dexnamic.alwayscharged.billing.BillingService this$0 -> d
    long run() -> d
    void responseCodeReceived(com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    boolean runIfConnected() -> c
    boolean runRequest() -> b
    int getStartId() -> a
com.dexnamic.alwayscharged.billing.BillingService$RestoreTransactions -> com.dexnamic.alwayscharged.billing.f:
    long mNonce -> a
    com.dexnamic.alwayscharged.billing.BillingService this$0 -> b
    long run() -> d
    void onRemoteException(android.os.RemoteException) -> a
    void responseCodeReceived(com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    boolean runIfConnected() -> c
    boolean runRequest() -> b
    int getStartId() -> a
com.dexnamic.alwayscharged.billing.Consts -> com.dexnamic.alwayscharged.billing.g:
    java.lang.String PURCHASE_PREFERENCES -> a
    java.lang.String PURCHASE_RESTORED -> b
    long BILLING_RESPONSE_INVALID_REQUEST_ID -> c
com.dexnamic.alwayscharged.billing.Consts$PurchaseState -> com.dexnamic.alwayscharged.billing.h:
    com.dexnamic.alwayscharged.billing.Consts$PurchaseState PURCHASED -> a
    com.dexnamic.alwayscharged.billing.Consts$PurchaseState CANCELED -> c
    com.dexnamic.alwayscharged.billing.Consts$PurchaseState REFUNDED -> b
    com.dexnamic.alwayscharged.billing.Consts$PurchaseState[] ENUM$VALUES -> d
    com.dexnamic.alwayscharged.billing.Consts$PurchaseState valueOf(int) -> a
com.dexnamic.alwayscharged.billing.Consts$ResponseCode -> com.dexnamic.alwayscharged.billing.i:
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode RESULT_OK -> a
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode RESULT_USER_CANCELED -> b
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode RESULT_SERVICE_UNAVAILABLE -> d
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode RESULT_BILLING_UNAVAILABLE -> e
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode RESULT_ITEM_UNAVAILABLE -> f
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode RESULT_DEVELOPER_ERROR -> g
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode RESULT_ERROR -> c
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode[] ENUM$VALUES -> h
    com.dexnamic.alwayscharged.billing.Consts$ResponseCode valueOf(int) -> a
com.dexnamic.alwayscharged.billing.PurchaseObserver -> com.dexnamic.alwayscharged.billing.j:
    android.app.Activity mActivity -> a
    android.os.Handler mHandler -> b
    java.lang.reflect.Method mStartIntentSender -> c
    java.lang.Object[] mStartIntentSenderArgs -> d
    java.lang.Class[] START_INTENT_SENDER_SIG -> e
    void onBillingSupported(boolean,java.lang.String) -> a
    void onPurchaseStateChange$25f6e421(com.dexnamic.alwayscharged.billing.Consts$PurchaseState,java.lang.String) -> a
    void onRequestPurchaseResponse(com.dexnamic.alwayscharged.billing.BillingService$RequestPurchase,com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    void onRestoreTransactionsResponse$4bfaf7a0(com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    void startBuyPageActivity(android.app.PendingIntent,android.content.Intent) -> a
    void postPurchaseStateChange(com.dexnamic.alwayscharged.billing.Consts$PurchaseState,java.lang.String,int,long,java.lang.String) -> a
com.dexnamic.alwayscharged.billing.PurchaseObserver$1 -> com.dexnamic.alwayscharged.billing.k:
    com.dexnamic.alwayscharged.billing.PurchaseObserver this$0 -> a
    com.dexnamic.alwayscharged.billing.Consts$PurchaseState val$purchaseState -> b
    java.lang.String val$itemId -> c
    int val$quantity -> d
    long val$purchaseTime -> e
    java.lang.String val$developerPayload -> f
    void run() -> run
com.dexnamic.alwayscharged.billing.ResponseHandler -> com.dexnamic.alwayscharged.billing.l:
    com.dexnamic.alwayscharged.billing.PurchaseObserver sPurchaseObserver -> a
    void register(com.dexnamic.alwayscharged.billing.PurchaseObserver) -> a
    void unregister$c9c8331() -> a
    void checkBillingSupportedResponse(boolean,java.lang.String) -> a
    void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent) -> a
    void purchaseResponse$3fada1b2(android.content.Context,com.dexnamic.alwayscharged.billing.Consts$PurchaseState,java.lang.String,long,java.lang.String) -> a
    java.lang.Boolean hasPurchased(android.content.Context) -> a
    long getAndroidID(android.content.Context) -> b
    void responseCodeReceived$795ab155(com.dexnamic.alwayscharged.billing.BillingService$RequestPurchase,com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    void responseCodeReceived(android.content.Context,com.dexnamic.alwayscharged.billing.BillingService$RestoreTransactions,com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
com.dexnamic.alwayscharged.billing.ResponseHandler$1 -> com.dexnamic.alwayscharged.billing.m:
    android.content.Context val$context -> a
    void run() -> run
com.dexnamic.alwayscharged.billing.Security -> com.dexnamic.alwayscharged.billing.n:
    java.security.SecureRandom RANDOM -> a
    java.util.HashSet sKnownNonces -> b
    long generateNonce() -> a
    void removeNonce(long) -> a
    java.util.ArrayList verifyPurchase(java.lang.String,java.lang.String) -> a
    java.security.PublicKey generatePublicKey(java.lang.String) -> a
    boolean verify(java.security.PublicKey,java.lang.String,java.lang.String) -> a
com.dexnamic.alwayscharged.billing.Security$VerifiedPurchase -> com.dexnamic.alwayscharged.billing.o:
    com.dexnamic.alwayscharged.billing.Consts$PurchaseState purchaseState -> a
    java.lang.String notificationId -> b
    java.lang.String productId -> c
    java.lang.String orderId -> d
    long purchaseTime -> e
    java.lang.String developerPayload -> f
com.dexnamic.alwayscharged.billing.UpgradeProActivity -> com.dexnamic.alwayscharged.billing.UpgradeProActivity:
    java.lang.String mItemName -> a
    java.lang.String mProductID -> b
    com.dexnamic.alwayscharged.billing.UpgradeProActivity$UpgradePurchaseObserver mPurchaseObserver -> c
    android.os.Handler mHandler -> d
    com.dexnamic.alwayscharged.billing.BillingService mBillingService -> e
    android.widget.Button mBuyButton -> f
    java.lang.String mDeveloperPayloadContents -> g
    void onCreate(android.os.Bundle) -> onCreate
    void userUpgradeToPro() -> a
    void userDowngradedFromPro() -> b
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    android.app.Dialog createDialog(int,int) -> a
    void access$0(com.dexnamic.alwayscharged.billing.UpgradeProActivity) -> a
    android.widget.Button access$1(com.dexnamic.alwayscharged.billing.UpgradeProActivity) -> b
    void access$2(com.dexnamic.alwayscharged.billing.UpgradeProActivity,java.lang.String,java.lang.String) -> a
com.dexnamic.alwayscharged.billing.UpgradeProActivity$1 -> com.dexnamic.alwayscharged.billing.p:
    com.dexnamic.alwayscharged.billing.UpgradeProActivity this$0 -> a
    android.net.Uri val$helpUri -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.dexnamic.alwayscharged.billing.UpgradeProActivity$UpgradePurchaseObserver -> com.dexnamic.alwayscharged.billing.q:
    com.dexnamic.alwayscharged.billing.UpgradeProActivity this$0 -> a
    void onBillingSupported(boolean,java.lang.String) -> a
    void onPurchaseStateChange$25f6e421(com.dexnamic.alwayscharged.billing.Consts$PurchaseState,java.lang.String) -> a
    void onRequestPurchaseResponse(com.dexnamic.alwayscharged.billing.BillingService$RequestPurchase,com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
    void onRestoreTransactionsResponse$4bfaf7a0(com.dexnamic.alwayscharged.billing.Consts$ResponseCode) -> a
com.dexnamic.alwayscharged.util.Base64 -> com.dexnamic.alwayscharged.a.a:
    byte[] DECODABET -> a
    int decode4to3(byte[],int,byte[],int,byte[]) -> a
    byte[] decode(java.lang.String) -> a
com.dexnamic.alwayscharged.util.Base64DecoderException -> com.dexnamic.alwayscharged.a.b:
com.dexnamic.android.preference.ListPreferenceMultiSelect -> com.dexnamic.android.preference.ListPreferenceMultiSelect:
    java.lang.String separator -> a
    java.lang.String checkAllKey -> b
    boolean[] mClickedDialogEntryIndices -> c
    void setEntries(java.lang.CharSequence[]) -> setEntries
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    void restoreCheckedEntries() -> a
    void onDialogClosed(boolean) -> onDialogClosed
    java.lang.String join(java.lang.Iterable,java.lang.String) -> a
    boolean access$0(com.dexnamic.android.preference.ListPreferenceMultiSelect,int) -> a
    void access$1(com.dexnamic.android.preference.ListPreferenceMultiSelect,android.content.DialogInterface,boolean) -> a
    boolean[] access$2(com.dexnamic.android.preference.ListPreferenceMultiSelect) -> a
com.dexnamic.android.preference.ListPreferenceMultiSelect$1 -> com.dexnamic.android.preference.a:
    com.dexnamic.android.preference.ListPreferenceMultiSelect this$0 -> a
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
